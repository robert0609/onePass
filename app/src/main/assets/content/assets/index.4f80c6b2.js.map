{"version":3,"file":"index.4f80c6b2.js","sources":["../../src/api/account.ts","../../src/core/business/account/index.ts","../../src/pages/account/edit/index.tsx"],"sourcesContent":["import { ApiError } from '@/core/exception';\nimport ajax from '@/utils/http';\nimport { BaseResponse } from './base';\n\nexport interface Account {\n  id: number;\n  siteId: number;\n  userName: string;\n  password: string;\n}\n\n//#region getAccountListBySite\nexport interface GetAccountListBySiteRequest {\n  siteId: number;\n}\n\nexport type GetAccountListBySiteResponse = BaseResponse<Account[]>;\n\nexport async function getAccountListBySite(\n  params: GetAccountListBySiteRequest\n): Promise<GetAccountListBySiteResponse> {\n  const res = await ajax.get<GetAccountListBySiteResponse>(\n    '/webapi/account/fetch',\n    {\n      siteid: params.siteId\n    }\n  );\n  if (!res.data.isSuccess) {\n    throw ApiError.createApiError(\n      res.data.message ? res.data.message : res.data.errorCode?.toString()\n    );\n  }\n  return res.data;\n}\n//#endregion\n\n//#region getAccountInfoById\nexport interface GetAccountInfoByIdRequest {\n  id: number;\n}\n\nexport type GetAccountInfoByIdResponse = BaseResponse<Account[]>;\n\nexport async function getAccountInfoById(\n  params: GetAccountInfoByIdRequest\n): Promise<GetAccountInfoByIdResponse> {\n  const res = await ajax.get<GetAccountInfoByIdResponse>(\n    '/webapi/account/fetch',\n    params\n  );\n  if (!res.data.isSuccess) {\n    throw ApiError.createApiError(\n      res.data.message ? res.data.message : res.data.errorCode?.toString()\n    );\n  }\n  return res.data;\n}\n//#endregion\n\n//#region updateAccountInfo\nexport interface UpdateAccountInfoRequest {\n  account: Account;\n}\n\nexport type UpdateAccountInfoResponse = BaseResponse;\n\nexport async function updateAccountInfo(\n  params: UpdateAccountInfoRequest\n): Promise<UpdateAccountInfoResponse> {\n  const acc = params.account;\n  const res = await ajax.get<UpdateAccountInfoResponse>(\n    '/webapi/account/save',\n    {\n      account: JSON.stringify({\n        Id: acc.id,\n        SiteId: acc.siteId,\n        UserName: encodeURIComponent(acc.userName),\n        Password: acc.password\n      })\n    }\n  );\n  if (!res.data.isSuccess) {\n    throw ApiError.createApiError(\n      res.data.message ? res.data.message : res.data.errorCode?.toString()\n    );\n  }\n  return res.data;\n}\n//#endregion\n","import { ref, reactive, toRaw } from 'vue';\nimport {\n  getAccountListBySite,\n  getAccountInfoById,\n  updateAccountInfo,\n  Account\n} from '@/api';\nimport { UIError } from '@/core/exception';\nimport { isStringEmpty } from 'roy-type-assert';\n\nexport function accountListController() {\n  const siteId = ref<number>(0);\n\n  const accountList = ref<Account[]>([]);\n  const currentPageIndex = ref<number>(0);\n  const pageSize = ref<number>(0);\n  const totalPageCount = ref<number>(1);\n  const totalCount = ref<number>(0);\n\n  async function fetchAccountList() {\n    try {\n      if (siteId.value > 0) {\n        const res = await getAccountListBySite({ siteId: siteId.value });\n        accountList.value = res.data;\n        pageSize.value = res.data.length;\n        totalCount.value = res.data.length;\n      } else {\n        throw UIError.createUIError('没有传入应用编号条件');\n      }\n    } catch (e) {\n      accountList.value = [];\n      currentPageIndex.value = 0;\n      pageSize.value = 0;\n      totalCount.value = 0;\n      throw e;\n    }\n  }\n\n  return {\n    siteId,\n    accountList,\n    currentPageIndex,\n    pageSize,\n    totalPageCount,\n    totalCount,\n    fetchAccountList\n  };\n}\n\nexport function accountController() {\n  const account = reactive<Account>({\n    id: 0,\n    siteId: 0,\n    userName: '',\n    password: ''\n  });\n\n  async function fetchAccount() {\n    try {\n      if (account.id > 0) {\n        const res = await getAccountInfoById({\n          id: account.id\n        });\n        if (res.data.length > 0) {\n          account.siteId = res.data[0].siteId;\n          account.userName = res.data[0].userName;\n          account.password = res.data[0].password;\n        } else {\n          throw UIError.createUIError('未查询到账号');\n        }\n      } else {\n        throw UIError.createUIError('没有传入有效账号id');\n      }\n    } catch (e) {\n      account.userName = '';\n      account.password = '';\n      throw e;\n    }\n  }\n\n  async function updateAccount() {\n    if (isStringEmpty(account.userName)) {\n      throw UIError.createUIError('请输入用户名');\n    }\n    if (isStringEmpty(account.password)) {\n      throw UIError.createUIError('请输入密码');\n    }\n    try {\n      await updateAccountInfo({\n        account: toRaw(account)\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  return {\n    account,\n    fetchAccount,\n    updateAccount\n  };\n}\n","import { defineComponent, ref, onMounted } from 'vue';\nimport { accountController } from '@/core/business/account';\nimport { ElLoading, ElMessage, ILoadingInstance } from 'element-plus';\n\nconst chars =\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#'.split('');\nfunction randomPassword(n: number) {\n  const result = [];\n  const max = chars.length;\n  for (let i = 0; i < n; ++i) {\n    const idx = Math.floor(Math.random() * max);\n    result.push(chars[idx]);\n  }\n  return result.join('');\n}\n\nexport default defineComponent({\n  name: 'AccountEdit',\n  props: {\n    id: {\n      type: Number,\n      required: true\n    },\n    siteId: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['confirm', 'cancel'],\n  setup(props, { emit }) {\n    const { account, fetchAccount, updateAccount } = accountController();\n    const submitLoading = ref<boolean>(false);\n    const refForm = ref<typeof ElForm | null>(null);\n    let loadingInstance: ILoadingInstance | undefined;\n\n    const formRules = {\n      userName: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\n      password: [{ required: true, message: '请输入密码', trigger: 'blur' }]\n    };\n\n    function onClickSave(): void {\n      if (refForm.value) {\n        submitLoading.value = true;\n        refForm.value.validate((isValid: boolean) => {\n          if (isValid) {\n            updateAccount()\n              .then(() => {\n                emit('confirm');\n              })\n              .catch((e) => {\n                ElMessage.error(e.message);\n              })\n              .finally(() => {\n                submitLoading.value = false;\n              });\n          } else {\n            submitLoading.value = false;\n          }\n        });\n      }\n    }\n\n    function onClickCancel() {\n      emit('cancel');\n    }\n\n    onMounted(() => {\n      account.id = props.id;\n      account.siteId = props.siteId;\n\n      if (account.id > 0) {\n        loadingInstance = ElLoading.service({\n          target: '#edit-form'\n        });\n        fetchAccount()\n          .catch((e) => {\n            ElMessage.error(e.message);\n          })\n          .finally(() => {\n            if (loadingInstance) {\n              loadingInstance.close();\n            }\n          });\n      }\n    });\n\n    function onClickGenerate() {\n      account.password = randomPassword(10);\n    }\n\n    return () => (\n      <ElForm\n        model={account}\n        ref={refForm}\n        rules={formRules}\n        labelPosition=\"right\"\n        labelWidth=\"90px\"\n        {...{\n          id: 'edit-form'\n        }}\n      >\n        <ElFormItem label=\"用户名\" prop=\"userName\">\n          <ElInput\n            {...{\n              modelValue: account.userName,\n              ['onUpdate:modelValue']: (val: string) => (account.userName = val)\n            }}\n          ></ElInput>\n        </ElFormItem>\n        <ElFormItem label=\"密码\" prop=\"password\">\n          <ElInput\n            {...{\n              modelValue: account.password,\n              ['onUpdate:modelValue']: (val: string) => (account.password = val)\n            }}\n          ></ElInput>\n        </ElFormItem>\n        <ElFormItem>\n          <ElButton onClick={onClickGenerate}>生成密码</ElButton>\n          <ElButton\n            type=\"primary\"\n            onClick={onClickSave}\n            loading={submitLoading.value}\n          >\n            提交\n          </ElButton>\n          <ElButton onClick={onClickCancel}>取消</ElButton>\n        </ElFormItem>\n      </ElForm>\n    );\n  }\n});\n"],"names":["join","id","type","loadingInstance","formRules","required","fetchAccount","ElMessage","close"],"mappings":"8LAmBE,EACuC,YACjC,GAAM,KAAM,GAAK,IACrB,wBACA,CACE,OAAQ,EAAO,YAGf,CAAC,EAAI,KAAK,eACN,GAAS,eACb,EAAI,KAAK,QAAU,EAAI,KAAK,QAAU,KAAI,KAAK,YAAT,cAAoB,kBAGvD,GAAI,sBAYX,EACqC,YAC/B,GAAM,KAAM,GAAK,IACrB,wBACA,MAEE,CAAC,EAAI,KAAK,eACN,GAAS,eACb,EAAI,KAAK,QAAU,EAAI,KAAK,QAAU,KAAI,KAAK,YAAT,cAAoB,kBAGvD,GAAI,sBAYX,EACoC,YAC9B,GAAM,EAAO,QACb,EAAM,KAAM,GAAK,IACrB,uBACA,CACE,QAAS,KAAK,UAAU,CACtB,GAAI,EAAI,GACR,OAAQ,EAAI,OACZ,SAAU,mBAAmB,EAAI,UACjC,SAAU,EAAI,gBAIhB,CAAC,EAAI,KAAK,eACN,GAAS,eACb,EAAI,KAAK,QAAU,EAAI,KAAK,QAAU,KAAI,KAAK,YAAT,cAAoB,kBAGvD,GAAI,iBC5E2B,MAChC,GAAS,EAAY,GAErB,EAAc,EAAe,IAC7B,EAAmB,EAAY,GAC/B,EAAW,EAAY,GACvB,EAAiB,EAAY,GAC7B,EAAa,EAAY,qBAEG,IAC5B,IACE,EAAO,MAAQ,EAAG,MACd,GAAM,KAAM,GAAqB,CAAE,OAAQ,EAAO,UAC5C,MAAQ,EAAI,OACf,MAAQ,EAAI,KAAK,SACf,MAAQ,EAAI,KAAK,iBAEtB,GAAQ,cAAc,sEAEvB,WACK,MAAQ,KACH,MAAQ,IAChB,MAAQ,IACN,MAAQ,EACb,SAIH,CACL,SACA,cACA,mBACA,WACA,iBACA,aACA,gCAIgC,MAC5B,GAAU,EAAkB,CAChC,GAAI,EACJ,OAAQ,EACR,SAAU,GACV,SAAU,uBAGkB,IACxB,IACE,EAAQ,GAAK,EAAG,MACZ,GAAM,KAAM,GAAmB,CACnC,GAAI,EAAQ,QAEV,EAAI,KAAK,OAAS,IACZ,OAAS,EAAI,KAAK,GAAG,SACrB,SAAW,EAAI,KAAK,GAAG,WACvB,SAAW,EAAI,KAAK,GAAG,mBAEzB,GAAQ,cAAc,kDAGxB,GAAQ,cAAc,4DAEvB,WACC,SAAW,KACX,SAAW,GACb,qBAIqB,IACzB,EAAc,EAAQ,eAClB,GAAQ,cAAc,2CAE1B,EAAc,EAAQ,eAClB,GAAQ,cAAc,qCAE1B,MACI,GAAkB,CACtB,QAAS,EAAM,WAEV,QACD,UAIH,CACL,UACA,eACA,iBC5FF,QAAY,2GAGM,uEAGJA,wBAMZC,4CAIQ,OACNC,4IASEC,IAEEC,qBACSC,sBAA4C,CADzC,oBAEL,uCAAEA,2BAA2C,8IAa9C,0IAqBO,SAAf,QAGAC,cAEIC,gCAGA,cACkBC,yHAkBpBP"}